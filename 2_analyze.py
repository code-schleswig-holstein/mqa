#!/usr/bin/env python
# coding: utf-8

# MIT License
# 
# Copyright (c) 2021 Dr. Jesper Zedlitz <jesper.zedlitz@melund.landsh.de>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import pandas as pd
import os
from pathlib import Path

# Read data generated by 1_collect.py
relative = pd.read_csv('relative.csv')
relative.set_index(['contributor'], inplace=True)

if not Path('results').exists():
  os.mkdir('results')

relative.index = relative.index.str[-26:]

def save_diagram( column, title):
    col = []
    for contributor in relative.index:
        if relative.loc[contributor][column] < 0.5:
            col.append('red')
        elif relative.loc[contributor][column] < 1:
            col.append('yellow')
        else:
            col.append('green')
    plot = relative[column].plot.barh(figsize=(15,12),title=title, color=col)
    plot.set_xlim(0,1)
    fig = plot.get_figure()
    fig.subplots_adjust(left=0.2, bottom=0.1, right=0.95, top=0.95)
    fig.savefig('results/'+column+'.pdf')
    fig.savefig('results/'+column+'.png')
    fig.clf()

save_diagram('findability_time','Auffindbarkeit - Zeitbasierte Suche')
save_diagram('findability_geo','Auffindbarkeit - Ortsbezogene Suche')
save_diagram('accessibility_download','Zugänglichkeit - Download URL')
save_diagram('reusability_access_rights','Wiederverwendbarkeit - Zugangsbeschränkungsangaben')
save_diagram('reusability_license_information','Wiederverwendbarkeit - Lizenzangaben')
save_diagram('reusability_access_rights_vocabulary','Wiederverwendbarkeit - Zugangsbeschränkungsangaben aus Vokabular')
save_diagram('reusability_contact','Wiederverwendbarkeit - Kontaktinformation')
save_diagram('reusability_publisher','Wiederverwendbarkeit - Herausgeber')
save_diagram('contextuality_rights','Kontext - Rechte')
save_diagram('contextuality_dataset_modified','Kontext - Dataset: Änderungsdatum')
save_diagram('contextuality_dataset_issued','Kontext - Dataset: Ausstellungsdatum')
save_diagram('contextuality_distribution_modified','Kontext - Distribution: Änderungsdatum')
save_diagram('contextuality_distribution_issued','Kontext - Distribution: Ausstellungsdatum')
save_diagram('contextuality_file_size','Kontext - Dateigröße')
save_diagram('findability_keyword','Auffindbarkeit - Schlüsselwörter')
save_diagram('findability_category','Auffindbarkeit - Kategorien')
save_diagram('interoperability_format','Interoperabilität - Format')
save_diagram('interoperability_media_type','Interoperabilität - Media Type')
save_diagram('interoperability_format_from_vocabulary','Interoperabilität - Format aus Vokabular')
save_diagram('interoperability_media_type_from_vocabulary','Interoperabilität - Media Type aus Vokabular')
